input {

  beats {
    port => 5044
  }

  syslog {
    type => "haproxy-access"
    port => 5045
  }

}

filter {

  mutate {
    add_field => { "logstash" => "${LOGSTASH_HOST}" }
    add_field => { "raw_message" => "%{message}" }
  }

  if "haproxy" in [tags] {

    grok {
      match => {
        "message" => "%{HAPROXYHTTPBASE}"
      }
    }

    if "_grokparsefailure" in [tags] {

      grok {
        match => { "message" => "%{HAPROXYTCP}" }
        remove_tag => ["_grokparsefailure"]
      }

    }

    mutate {
      rename => {
        "logsource" => "sourcehost"
        "program" => "appname"
      }
    }

    date {
      timezone => "America/Sao_Paulo"
      match => ["accept_date", "dd/MMM/yyyy:HH:mm:ss.SSS"]
    }

  } else {

    if "oldlogs" in [tags] {

      if [message] =~ /UDPSender|UDPReceiver|ObjectSender|ObjectReceiver|ProcedureSwitcher|ProcedureManager|AckHandler|RangeTree|PrefixTree|AliveManager|DBConfig|Buscando objeto na fila|DBConf/ {
        drop { }
      }

      grok {
        match => {"message" => "%{DATA:datetime} \[%{DATA:classe}\] %{GREEDYDATA:msg}"}
      }

      mutate {
        replace => { "message" => "%{msg}" }
        remove_field => ["msg"]
      }

      date {
        timezone => "America/Sao_Paulo"
        match => [ "datetime",  "dd/MM/yyyy HH:mm:ss:SSS" ]
      }

    } else if "newlogs" in [tags] {

      grok {
        match => {"message" => "%{DATA:datetime} \[%{DATA:classe}\] \[%{DATA:key}\] %{DATA:level} - %{GREEDYDATA:msg}"}
      }

      mutate {
        replace => { "message" => "%{msg}" }
        remove_field => ["msg"]
      }

      date {
        timezone => "America/Sao_Paulo"
        match => [ "datetime",  "yyyy-MM-dd HH:mm:ss.SSS" ]
      }

    }

  }


}

output {

  elasticsearch{
    hosts => ["172.18.10.210:9200"]
  }

#  syslog{
#    host => "172.18.10.167"
#    port => 514
#    sourcehost => "%{host}"
#    message => "%{raw_message}"
#    appname => "%{appname}"
#    protocol => ["tcp"]
#    facility => "local7"
#  }

}
